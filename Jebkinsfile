pipeline {
    agent none

    parameters {
        booleanParam(name: 'SHOULD_RUN_COVERITY', defaultValue: false, description: 'whether should run coverity; defaults to false')
    }
    environment {
         REPO = credentials('Repository_Credential')
         MAVEN_OPTS="-Xmx6g"
    }

    stages {
        stage('mvn -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn build') {
            when {
                not { anyOf{  branch 'dev' ; branch 'master' } }
                }
                agent {
                    docker {
                        image 'maven:3.5'
                        label 'dind'
                        args '-v /root/.m2:/root/.m2'
                    }
                }
                environment {
                    REPO = credentials('Repository_Credential')
                    DAWEC_IO_REPO = credentials('Predix_IO_Repository_Credential')
                    MAVEN_OPTS="-Xmx6g"
                }
                steps {
                    sh 'mvn -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn clean install -s jenkins_settings.xml -Drepo.username=$REPO_USR -Drepo.password=$REPO_PSW -Dpredixio.username=$DAWEC_IO_REPO_USR -Dpredixio.password=$DAWEC_IO_REPO_PSW'
                }
                post {
                    always {
                        junit 'target/surefire-reports/*.xml'
                        step( [ $class: 'JacocoPublisher' ] )
                    }
                }
            }

        stage('mvn -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn deploy') {
            when {
                anyOf{  branch 'dev' ; branch 'master' }
            }
            agent {
                docker {
                    image 'maven:3.5'
                    label 'dind'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            environment {
                REPO = credentials('Repository_Credential')
                DAWEC_IO_REPO = credentials('Predix_IO_Repository_Credential')
            }
            steps {
                sh 'mvn -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn clean deploy -B -s jenkins_settings.xml -Drepo.username=$REPO_USR -Drepo.password=$REPO_PSW -Dpredixio.username=$DAWEC_IO_REPO_USR -Dpredixio.password=$DAWEC_IO_REPO_PSW'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                    step( [ $class: 'JacocoPublisher' ] )
                }
            }
        }

        stage('continue the flow'){
		    when {
                branch 'dev'
            }
			steps{
				build job: 'audit-publisher-build/dev', wait: false
			}
		}

		stage ('coverity scan') {
            agent {
                docker
                {
                    image 'registry.gear.ge.com/dig-propel/predixci-coverity8.7.1'
                    label 'dind'
                }
            }
            environment {

                COMPLIANCEENABLED = true
            }
            when {
                expression { params.SHOULD_RUN_COVERITY }
            }
            steps {
                sh 'rm -rf $WORKSPACE/covtemp'
                sh 'mkdir -p $WORKSPACE/covtemp'
                sh '/opt/cov-analysis-linux64-8.7.1/bin/cov-build --dir $WORKSPACE/covtemp mvn -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -B -s jenkins_settings.xml -Drepo.username=$REPO_USR -Drepo.password=$REPO_PSW -Dmaven.test.failure.ignore clean install'
                sh '/opt/cov-analysis-linux64-8.7.1/bin/cov-analyze --dir $WORKSPACE/covtemp --export-summaries false'
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Coverity_Token', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                    sh "/opt/cov-analysis-linux64-8.7.1/bin/cov-commit-defects --dir $WORKSPACE/covtemp --host pdx.coverity.build.ge.com --https-port 8443 --stream 'PredixCyberSecurity_IL' --user $USERNAME --password $PASSWORD"
                }
                sh 'ls -ltr'
                sh 'ls -ltr $WORKSPACE/covtemp'
                sh 'ls -ltr $WORKSPACE/covtemp/emit'
                sh 'ls -ltr $WORKSPACE/covtemp/output'
            }
        }
    }
}
